name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # ============================================================================
  # STAGE 1: Unit Tests & Coverage
  # ============================================================================
  # This job runs first and gates all subsequent jobs
  # If tests fail, the entire pipeline stops here to save resources
  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better coverage comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx lerna run code:check:ci --stream

      - name: Build all packages
        run: npm run build:all

      - name: Run unit tests with coverage
        run: npx lerna run test:coverage --stream

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/ioc/coverage/lcov.info,./packages/testing/coverage/lcov.info,./packages/cli/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            packages/*/coverage
            packages/*/test-results
          retention-days: 7

  # ============================================================================
  # STAGE 2: Build Validation (Matrix)
  # ============================================================================
  # This job runs only if unit tests pass
  # Tests build across multiple Node.js versions in parallel
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [test]  # ⚠️ Depends on test job - won't run if tests fail
    strategy:
      fail-fast: true  # Stop all matrix jobs if one fails
      matrix:
        node-version: [18, 20, 22]  # Test on multiple Node.js versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build:all

      - name: Verify build artifacts exist
        run: |
          echo "Checking build artifacts..."
          test -d packages/ioc/dist || (echo "❌ IoC build directory not found" && exit 1)
          test -d packages/testing/dist || (echo "❌ Testing build directory not found" && exit 1)
          test -d packages/cli/dist || (echo "❌ CLI build directory not found" && exit 1)
          test -d packages/shared/dist || (echo "❌ Shared build directory not found" && exit 1)
          echo "✅ Build artifacts verified"

      - name: Test package imports (smoke test)
        run: |
          echo "Testing package imports..."
          node -e "require('reflect-metadata'); const ioc = require('@nexus-ioc/core'); console.log('✅ IoC package import successful');"
          node -e "require('reflect-metadata'); const testing = require('@nexus-ioc/testing'); console.log('✅ Testing package import successful');"
          # CLI package is designed to run as a command-line tool, not to be imported
          # Test that the CLI binary exists and is executable
          test -f packages/cli/dist/index.js && echo "✅ CLI package build successful"
          echo "✅ All package imports successful"

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-node-${{ matrix.node-version }}
          path: |
            packages/*/dist/**/*.js
            packages/*/dist/**/*.d.ts
          retention-days: 7

  # ============================================================================
  # STAGE 3: Security & Additional Validation
  # ============================================================================
  # These jobs run only if build validation passes
  # They can run in parallel with each other

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: [build-validation]  # ⚠️ Depends on build-validation - won't run if builds fail
    # Skip on schedule events (handled by separate codeql.yml workflow)
    if: github.event_name != 'schedule'
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  pr-validation:
    name: PR Validation Check
    runs-on: ubuntu-latest
    needs: [build-validation]  # ⚠️ Depends on build-validation - won't run if builds fail
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with validation results
        uses: actions/github-script@v7
        with:
          script: |
            const testResult = '${{ needs.test.result }}';
            const buildResult = '${{ needs.build-validation.result }}';
            const allSuccess = testResult === 'success' && buildResult === 'success';

            const statusIcon = allSuccess ? '✅' : '❌';
            const statusText = allSuccess ? 'All validation checks passed!' : 'Validation failed!';

            const body = `## ${statusIcon} Pull Request Validation

            **Status:** ${statusText}

            ### Pipeline Stages

            | Stage | Status |
            |-------|--------|
            | Unit Tests & Coverage | ${testResult === 'success' ? '✅ Passed' : '❌ Failed'} |
            | Build Validation (Node 18, 20, 22) | ${buildResult === 'success' ? '✅ Passed' : '❌ Failed'} |

            ### Checks Performed

            - ${testResult === 'success' ? '✅' : '❌'} Code linting (Biome)
            - ${testResult === 'success' ? '✅' : '❌'} Unit tests with coverage
            - ${buildResult === 'success' ? '✅' : '❌'} Build all packages (Node 18, 20, 22)
            - ${buildResult === 'success' ? '✅' : '❌'} Package imports verification
            - ${buildResult === 'success' ? '✅' : '❌'} TypeScript declarations

            ### Packages Validated

            - @nexus-ioc/core
            - @nexus-ioc/testing
            - @nexus-ioc/cli
            - @nexus-ioc/shared

            ${allSuccess
              ? '✅ **This PR is ready for review!**'
              : '❌ **Please fix the issues before requesting review.**'}

            ---

            *Automated validation by GitHub Actions - Sequential pipeline for resource optimization*`;

            // Find existing validation comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Pull Request Validation')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

