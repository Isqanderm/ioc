name: Publish to NPM

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current version)'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  publish:
    name: Publish Packages to NPM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build:all

      - name: Run unit tests
        run: npm run test

      - name: Verify package integrity before release
        run: |
          echo "Verifying package structure..."
          test -d packages/ioc/dist || (echo "❌ IoC build missing" && exit 1)
          test -d packages/testing/dist || (echo "❌ Testing build missing" && exit 1)
          test -d packages/cli/dist || (echo "❌ CLI build missing" && exit 1)
          test -d packages/shared/dist || (echo "❌ Shared build missing" && exit 1)
          echo "✅ Package structure verified"

      - name: Publish packages to NPM
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          npx lerna publish from-package --yes --no-verify-access

      - name: Create GitHub Release Notes
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Try to read CHANGELOG.md if it exists
            let changelogContent = '';
            try {
              changelogContent = fs.readFileSync('CHANGELOG.md', 'utf8');
            } catch (error) {
              console.log('No CHANGELOG.md found, skipping release notes update');
              return;
            }

            const latestChanges = changelogContent.split('##')[1];

            if (latestChanges) {
              // Find the latest release
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });

              if (releases.length > 0) {
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releases[0].id,
                  body: latestChanges
                });
              }
            }

