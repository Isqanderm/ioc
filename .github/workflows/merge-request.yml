name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - development
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  # This workflow delegates to the comprehensive CI workflow
  # The CI workflow handles linting, building, and testing across multiple Node versions
  pr-validation:
    name: PR Validation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run code:check:ci

      - name: Build all packages
        run: npm run build:all

      - name: Run tests with coverage
        run: |
          npm run test:ready
          npm run test:coverage

      - name: Comment PR with validation results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ job.status }}';
            const statusIcon = conclusion === 'success' ? '✅' : '❌';
            const statusText = conclusion === 'success' ? 'All validation checks passed!' : 'Validation failed!';

            const body = `## ${statusIcon} Pull Request Validation

            **Status:** ${statusText}

            ### Checks Performed

            - ${conclusion === 'success' ? '✅' : '❌'} Code linting (Biome)
            - ${conclusion === 'success' ? '✅' : '❌'} Build all packages
            - ${conclusion === 'success' ? '✅' : '❌'} Unit tests with coverage

            ${conclusion === 'success'
              ? '✅ **This PR is ready for review!**'
              : '❌ **Please fix the issues before requesting review.**'}

            ---

            *Automated validation by GitHub Actions*`;

            // Find existing validation comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Pull Request Validation')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
